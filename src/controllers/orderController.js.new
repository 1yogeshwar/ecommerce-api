const mongoose = require('mongoose');
const Order = require('../models/Order');
const Cart = require('../models/Cart');
const Product = require('../models/Product');
const Payment = require('../models/Payment');

// @desc    Checkout - Create order from cart with stock reservation
// @route   POST /api/orders/checkout
// @access  Private (User)
exports.checkout = async (req, res, next) => {
  try {
    // Get user's cart
    const cart = await Cart.findOne({ userId: req.user._id })
      .populate('items.productId');

    if (!cart || cart.items.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Cart is empty'
      });
    }

    // Validate stock availability and reserve stock
    const orderItems = [];
    let totalAmount = 0;

    for (const item of cart.items) {
      const product = await Product.findById(item.productId._id);

      if (!product) {
        return res.status(404).json({
          success: false,
          message: `Product ${item.productId.name} not found`
        });
      }

      // Check if sufficient stock is available
      if (product.stock.availableStock < item.quantity) {
        return res.status(400).json({
          success: false,
          message: `Insufficient stock for product: ${product.name}. Available: ${product.stock.availableStock}, Requested: ${item.quantity}`
        });
      }

      // Reserve stock
      product.stock.availableStock -= item.quantity;
      product.stock.reservedStock += item.quantity;
      await product.save();

      // Prepare order item
      orderItems.push({
        productId: product._id,
        quantity: item.quantity,
        priceAtPurchase: product.price
      });

      totalAmount += product.price * item.quantity;
    }

    // Create order with PENDING_PAYMENT status
    const paymentExpiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes

    const order = await Order.create({
      userId: req.user._id,
      items: orderItems,
      totalAmount,
      status: 'PENDING_PAYMENT',
      paymentExpiresAt
    });

    // Clear the cart
    await cart.clearCart();
    await cart.save();

    res.status(201).json({
      success: true,
      message: 'Order created successfully. Please complete payment within 15 minutes.',
      data: {
        order,
        paymentExpiresAt
      }
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Process payment for an order
// @route   POST /api/orders/:id/pay
// @access  Private (User)
exports.processPayment = async (req, res, next) => {
  try {
    const order = await Order.findOne({
      _id: req.params.id,
      userId: req.user._id
    });

    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Order not found'
      });
    }

    if (order.status !== 'PENDING_PAYMENT') {
      return res.status(400).json({
        success: false,
        message: `Invalid order status: ${order.status}`
      });
    }

    if (order.paymentExpiresAt < Date.now()) {
      return res.status(400).json({
        success: false,
        message: 'Payment window expired'
      });
    }

    // Update order status
    order.status = 'PAID';
    await order.save();

    // Process each order item
    for (const item of order.items) {
      const product = await Product.findById(item.productId);
      if (product) {
        // Move reserved stock to consumed
        product.stock.reservedStock -= item.quantity;
        await product.save();
      }
    }

    res.json({
      success: true,
      message: 'Payment processed successfully',
      data: { order }
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Get user's orders
// @route   GET /api/orders
// @access  Private (User)
exports.getUserOrders = async (req, res, next) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    const orders = await Order.find({ userId: req.user._id })
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    const total = await Order.countDocuments({ userId: req.user._id });

    res.json({
      success: true,
      data: {
        orders,
        pagination: {
          page,
          limit,
          total,
          pages: Math.ceil(total / limit)
        }
      }
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Get order by ID
// @route   GET /api/orders/:id
// @access  Private (User)
exports.getOrderById = async (req, res, next) => {
  try {
    const order = await Order.findOne({
      _id: req.params.id,
      userId: req.user._id
    }).populate('items.productId');

    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Order not found'
      });
    }

    res.json({
      success: true,
      data: { order }
    });
  } catch (error) {
    next(error);
  }
};